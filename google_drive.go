package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"

	"io/ioutil"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/drive/v3"
)

func GetGoogleDriveSettingsHandler(w http.ResponseWriter, r *http.Request) {
	var settings models.GoogleDriveSettings
	err := db.DB.QueryRow(`SELECT id, client_id, client_secret, redirect_url, folder_name_template, created_at FROM google_drive_settings WHERE id = 1`).Scan(&settings.ID, &settings.ClientID, &settings.ClientSecret, &settings.RedirectURL, &settings.FolderNameTemplate, &settings.CreatedAt)
	if err != nil {
		log.Printf("Error retrieving Google Drive settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(settings)
}

func UpdateGoogleDriveSettingsHandler(w http.ResponseWriter, r *http.Request) {
	var settings models.GoogleDriveSettings
	err := json.NewDecoder(r.Body).Decode(&settings)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	_, err = db.DB.Exec(`INSERT INTO google_drive_settings (id, client_id, client_secret, redirect_url, folder_name_template) VALUES (1, $1, $2, $3, $4) ON CONFLICT (id) DO UPDATE SET client_id = $1, client_secret = $2, redirect_url = $3, folder_name_template = $4`,
		settings.ClientID, settings.ClientSecret, settings.RedirectURL, settings.FolderNameTemplate)
	if err != nil {
		log.Printf("Error updating Google Drive settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func createGoogleDriveFolder(pentest models.Pentest, settings models.GoogleDriveSettings) (string, error) {
	b, err := ioutil.ReadFile("credentials.json")
	if err != nil {
		return "", fmt.Errorf("Unable to read client secret file: %v", err)
	}

	config, err := google.ConfigFromJSON(b, drive.DriveFileScope)
	if err != nil {
		return "", fmt.Errorf("Unable to parse client secret file to config: %v", err)
	}

	client := getClient(config)

	srv, err := drive.New(client)
	if err != nil {
		return "", fmt.Errorf("Unable to retrieve Drive client: %v", err)
	}

	folderName := replacePlaceholders(settings.FolderNameTemplate, pentest)
	folder := &drive.File{
		Name:     folderName,
		MimeType: "application/vnd.google-apps.folder",
	}

	file, err := srv.Files.Create(folder).Do()
	if err != nil {
		return "", fmt.Errorf("Unable to create folder: %v", err)
	}

	return file.Id, nil
}

func replacePlaceholders(template string, pentest models.Pentest) string {
	template = strings.ReplaceAll(template, "{name}", pentest.Name)
	template = strings.ReplaceAll(template, "{id}", strconv.Itoa(pentest.ID))
	return template
}

func getClient(config *oauth2.Config) *http.Client {
	tokFile := "token.json"
	tok, err := tokenFromFile(tokFile)
	if err != nil {
		tok = getTokenFromWeb(config)
		saveToken(tokFile, tok)
	}
	return config.Client(context.Background(), tok)
}

func tokenFromFile(file string) (*oauth2.Token, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	tok := &oauth2.Token{}
	err = json.NewDecoder(f).Decode(tok)
	return tok, err
}

func saveToken(path string, token *oauth2.Token) {
	fmt.Printf("Saving credential file to: %s\n", path)
	f, err := os.Create(path)
	if err != nil {
		log.Fatalf("Unable to cache oauth token: %v", err)
	}
	defer f.Close()
	json.NewEncoder(f).Encode(token)
}

func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	fmt.Printf("Go to the following link in your browser then type the authorization code: \n%v\n", authURL)

	var authCode string
	if _, err := fmt.Scan(&authCode); err != nil {
		log.Fatalf("Unable to read authorization code: %v", err)
	}

	tok, err := config.Exchange(context.Background(), authCode)
	if err != nil {
		log.Fatalf("Unable to retrieve token from web: %v", err)
	}
	return tok
}
