package main

import (
	"html/template"
	"log"
	"net/http"

	"github.com/SecurityWaffle/pentest-tracker/internal/config"
	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/handlers"
	"github.com/SecurityWaffle/pentest-tracker/pkg/scheduler"
)

func main() {
	cfg := config.LoadConfig()

	db.InitDB(cfg.DatabaseURL)
	handlers.InitSAML()
	handlers.InitOIDC()
	scheduler.Start()

	mux := http.NewServeMux()
	mux.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("web/static"))))
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/home.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/pentests", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/pentests.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/pentests/form", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/pentest_form.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/findings", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/findings.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/findings/form", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/findings_form.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/reports", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/reports.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/settings", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/settings.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/users", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/users.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/jira", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/jira_settings.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/jira_import_settings", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/jira_import_settings.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/jira_status_mappings", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/jira_status_mappings.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/sso", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/sso_settings.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/templates", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/templates.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/databases", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("web/templates/admin_layout.html", "web/templates/admin/databases.html"))
		tmpl.ExecuteTemplate(w, "layout", nil)
	})
	mux.HandleFunc("/admin/google_drive/settings", handlers.AuthMiddleware(handlers.AdminOnly(http.HandlerFunc(handlers.GetGoogleDriveSettingsHandler))))
	mux.HandleFunc("/admin/google_drive/settings/update", handlers.AuthMiddleware(handlers.AdminOnly(http.HandlerFunc(handlers.UpdateGoogleDriveSettingsHandler))))
	mux.HandleFunc("/status", handlers.StatusHandler)
	mux.HandleFunc("/pentests", handlers.AuthMiddleware(http.HandlerFunc(handlers.ListPentestsHandler)))
	mux.HandleFunc("/pentests/create", handlers.AuthMiddleware(http.HandlerFunc(handlers.CreateOrUpdatePentestHandler)))
	mux.HandleFunc("/pentests/get", handlers.AuthMiddleware(http.HandlerFunc(handlers.GetPentestHandler)))
	mux.HandleFunc("/pentests/update", handlers.AuthMiddleware(http.HandlerFunc(handlers.CreateOrUpdatePentestHandler)))
	mux.HandleFunc("/pentests/delete", handlers.AuthMiddleware(http.HandlerFunc(handlers.DeletePentestHandler)))
	mux.HandleFunc("/findings", handlers.AuthMiddleware(http.HandlerFunc(handlers.GetFindingsHandler)))
	mux.HandleFunc("/findings/form", handlers.AuthMiddleware(http.HandlerFunc(handlers.CreateOrUpdateFindingHandler)))
	mux.HandleFunc("/reports/html", handlers.AuthMiddleware(http.HandlerFunc(handlers.GenerateHTMLReportHandler)))
	mux.HandleFunc("/reports/pdf", handlers.AuthMiddleware(http.HandlerFunc(handlers.GeneratePDFReportHandler)))
	mux.HandleFunc("/reports/csv", handlers.AuthMiddleware(http.HandlerFunc(handlers.GenerateCSVReportHandler)))
	mux.HandleFunc("/reports/docx", handlers.AuthMiddleware(http.HandlerFunc(handlers.GenerateDOCXReportHandler)))
	log.Fatal(http.ListenAndServe(":8080", mux))
}
