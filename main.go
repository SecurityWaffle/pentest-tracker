package main

import (
	"log"
	"net/http"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/handlers"
	"github.com/SecurityWaffle/pentest-tracker/pkg/middleware"
)

func main() {
	db.InitDB("user=yourusername dbname=yourdbname sslmode=disable") // Update with your actual DB connection string

	// Public routes
	http.HandleFunc("/", handlers.HomePageHandler)
	http.HandleFunc("/login", handlers.LoginHandler)
	http.HandleFunc("/register", handlers.RegisterHandler)
	http.HandleFunc("/logout", handlers.LogoutHandler)

	// Protected routes
	http.Handle("/pentests", middleware.AuthMiddleware(http.HandlerFunc(handlers.PentestsPageHandler)))
	http.Handle("/pentests/form", middleware.AuthMiddleware(http.HandlerFunc(handlers.CreateOrUpdatePentestHandler)))
	http.Handle("/pentests/delete", middleware.AuthMiddleware(http.HandlerFunc(handlers.DeletePentestHandler)))
	http.Handle("/api/pentests", middleware.AuthMiddleware(http.HandlerFunc(handlers.ListPentestsHandler)))
	http.Handle("/api/pentests/get", middleware.AuthMiddleware(http.HandlerFunc(handlers.GetPentestHandler)))

	// Admin routes
	http.Handle("/admin/users", middleware.AdminOnly(http.HandlerFunc(handlers.AdminUserManagementHandler)))
	http.Handle("/admin/settings", middleware.AdminOnly(http.HandlerFunc(handlers.AdminSettingsHandler)))
	http.Handle("/admin/sso", middleware.AdminOnly(http.HandlerFunc(handlers.SSOSettingsHandler)))
	http.Handle("/admin/jira", middleware.AdminOnly(http.HandlerFunc(handlers.JiraSettingsHandler)))
	http.Handle("/admin/google-drive", middleware.AdminOnly(http.HandlerFunc(handlers.GoogleDriveSettingsHandler)))

	log.Println("Starting server on :8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal(err)
	}
}
