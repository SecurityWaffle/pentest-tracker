package handlers

import (
	"html/template"
	"log"
	"net/http"
	"strings"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
	"github.com/jung-kurt/gofpdf"
)

func GenerateReportFromTemplate(templateContent string, findings []models.Finding) (string, error) {
	tmpl, err := template.New("report").Parse(templateContent)
	if err != nil {
		return "", err
	}

	var reportContent strings.Builder
	err = tmpl.Execute(&reportContent, findings)
	if err != nil {
		return "", err
	}

	return reportContent.String(), nil
}

func GenerateHTMLReportHandler(w http.ResponseWriter, r *http.Request) {
	pentestID := r.URL.Query().Get("pentest_id")
	templateID := r.URL.Query().Get("template_id")
	findings, err := getFindingsByPentestID(pentestID)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	var templateContent string
	err = db.DB.QueryRow(`SELECT content FROM report_templates WHERE id = $1`, templateID).Scan(&templateContent)
	if err != nil {
		log.Printf("Error querying template: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	reportContent, err := GenerateReportFromTemplate(templateContent, findings)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "text/html")
	w.Write([]byte(reportContent))
}

func GeneratePDFReportHandler(w http.ResponseWriter, r *http.Request) {
	pentestID := r.URL.Query().Get("pentest_id")
	templateID := r.URL.Query().Get("template_id")
	findings, err := getFindingsByPentestID(pentestID)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	var templateContent string
	err = db.DB.QueryRow(`SELECT content FROM report_templates WHERE id = $1`, templateID).Scan(&templateContent)
	if err != nil {
		log.Printf("Error querying template: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	reportContent, err := GenerateReportFromTemplate(templateContent, findings)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	pdf := gofpdf.New("P", "mm", "A4", "")
	pdf.AddPage()
	pdf.SetFont("Arial", "", 12)
	pdf.MultiCell(0, 10, reportContent, "", "", false)

	w.Header().Set("Content-Type", "application/pdf")
	pdf.Output(w)
}

func GenerateCSVReportHandler(w http.ResponseWriter, r *http.Request) {
	pentestID := r.URL.Query().Get("pentest_id")
	templateID := r.URL.Query().Get("template_id")
	findings, err := getFindingsByPentestID(pentestID)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	var templateContent string
	err = db.DB.QueryRow(`SELECT content FROM report_templates WHERE id = $1`, templateID).Scan(&templateContent)
	if err != nil {
		log.Printf("Error querying template: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	reportContent, err := GenerateReportFromTemplate(templateContent, findings)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "text/csv")
	w.Write([]byte(reportContent))
}

func GenerateDOCXReportHandler(w http.ResponseWriter, r *http.Request) {
	pentestID := r.URL.Query().Get("pentest_id")
	templateID := r.URL.Query().Get("template_id")
	findings, err := getFindingsByPentestID(pentestID)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	var templateContent string
	err = db.DB.QueryRow(`SELECT content FROM report_templates WHERE id = $1`, templateID).Scan(&templateContent)
	if err != nil {
		log.Printf("Error querying template: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	reportContent, err := GenerateReportFromTemplate(templateContent, findings)
	if err != nil {
		log.Printf("Error generating report: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	// DOCX generation logic here using reportContent

	w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
	// Write the DOCX file to the response
}

func getFindingsByPentestID(pentestID string) ([]models.Finding, error) {
	rows, err := db.DB.Query(`
        SELECT id, title, description, severity, status, cvss_score, cvss_calculation_link, jira_ticket, recommendation, proof_of_concept, pentest_id
        FROM findings
        WHERE pentest_id = $1
    `, pentestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	findings := []models.Finding{}
	for rows.Next() {
		var finding models.Finding
		if err := rows.Scan(&finding.ID, &finding.Title, &finding.Description, &finding.Severity, &finding.Status, &finding.CVSSScore, &finding.CVSSCalculationLink, &finding.JiraTicket, &finding.Recommendation, &finding.ProofOfConcept, &finding.PentestID); err != nil {
			return nil, err
		}
		findings = append(findings, finding)
	}

	return findings, nil
}
