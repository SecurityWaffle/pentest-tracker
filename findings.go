package handlers

import (
	"database/sql"
	"encoding/json"
	"html/template"
	"log"
	"net/http"
	"strings"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func GetFindingsHandler(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query().Get("q")
	var rows *sql.Rows
	var err error
	if query != "" {
		query = "%" + strings.ToLower(query) + "%"
		rows, err = db.DB.Query(`
            SELECT findings.id, findings.title, findings.description, findings.severity, findings.status, findings.cvss_score, findings.cvss_calculation_link, findings.jira_ticket, findings.recommendation, findings.proof_of_concept, pentests.name
            FROM findings
            JOIN pentests ON findings.pentest_id = pentests.id
            WHERE LOWER(findings.title) LIKE $1 OR LOWER(findings.status) LIKE $1 OR LOWER(pentests.name) LIKE $1
        `, query)
	} else {
		rows, err = db.DB.Query(`
            SELECT findings.id, findings.title, findings.description, findings.severity, findings.status, findings.cvss_score, findings.cvss_calculation_link, findings.jira_ticket, findings.recommendation, findings.proof_of_concept, pentests.name
            FROM findings
            JOIN pentests ON findings.pentest_id = pentests.id
        `)
	}
	if err != nil {
		log.Printf("Error querying findings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	findings := []models.Finding{}
	for rows.Next() {
		var finding models.Finding
		var pentestName string
		if err := rows.Scan(&finding.ID, &finding.Title, &finding.Description, &finding.Severity, &finding.Status, &finding.CVSSScore, &finding.CVSSCalculationLink, &finding.JiraTicket, &finding.Recommendation, &finding.ProofOfConcept, &pentestName); err != nil {
			log.Printf("Error scanning finding: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
		finding.Pentest = template.HTMLEscapeString(pentestName)
		finding.Title = template.HTMLEscapeString(finding.Title)
		finding.Description = template.HTMLEscapeString(finding.Description)
		finding.Severity = template.HTMLEscapeString(finding.Severity)
		finding.Status = template.HTMLEscapeString(finding.Status)
		finding.CVSSCalculationLink = template.HTMLEscapeString(finding.CVSSCalculationLink)
		finding.JiraTicket = template.HTMLEscapeString(finding.JiraTicket)
		finding.Recommendation = template.HTMLEscapeString(finding.Recommendation)
		finding.ProofOfConcept = template.HTMLEscapeString(finding.ProofOfConcept)
		findings = append(findings, finding)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(findings)
}

func CreateOrUpdateFindingHandler(w http.ResponseWriter, r *http.Request) {
	var finding models.Finding
	err := json.NewDecoder(r.Body).Decode(&finding)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	if finding.ID != 0 {
		_, err = db.DB.Exec(`
            UPDATE findings SET title = $1, description = $2, severity = $3, status = $4, cvss_score = $5, cvss_calculation_link = $6, jira_ticket = $7, recommendation = $8, proof_of_concept = $9 WHERE id = $10`,
			finding.Title, finding.Description, finding.Severity, finding.Status, finding.CVSSScore, finding.CVSSCalculationLink, finding.JiraTicket, finding.Recommendation, finding.ProofOfConcept, finding.ID)
	} else {
		_, err = db.DB.Exec(`
            INSERT INTO findings (title, description, severity, status, cvss_score, cvss_calculation_link, jira_ticket, recommendation, proof_of_concept, pentest_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
			finding.Title, finding.Description, finding.Severity, finding.Status, finding.CVSSScore, finding.CVSSCalculationLink, finding.JiraTicket, finding.Recommendation, finding.ProofOfConcept, finding.PentestID)
	}

	if err != nil {
		log.Printf("Error saving finding: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}
