package handlers

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func InitSAML() {
	// SAML initialization logic
}

func GetSAMLSettingsHandler(w http.ResponseWriter, r *http.Request) {
	var settings models.SAMLSettings
	err := db.DB.QueryRow(`SELECT id, idp_metadata_url, sp_entity_id, sp_acs_url FROM saml_settings WHERE id = 1`).Scan(&settings.ID, &settings.IdpMetadataURL, &settings.SpEntityID, &settings.SpACSURL)
	if err != nil {
		log.Printf("Error retrieving SAML settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(settings)
}

func UpdateSAMLSettingsHandler(w http.ResponseWriter, r *http.Request) {
	var settings models.SAMLSettings
	err := json.NewDecoder(r.Body).Decode(&settings)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	_, err = db.DB.Exec(`INSERT INTO saml_settings (id, idp_metadata_url, sp_entity_id, sp_acs_url) VALUES (1, $1, $2, $3) ON CONFLICT (id) DO UPDATE SET idp_metadata_url = $1, sp_entity_id = $2, sp_acs_url = $3`,
		settings.IdpMetadataURL, settings.SpEntityID, settings.SpACSURL)
	if err != nil {
		log.Printf("Error updating SAML settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func SAMLHandler(w http.ResponseWriter, r *http.Request) {
	// SAML login logic
}
