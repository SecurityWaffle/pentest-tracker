package handlers

import (
	"net/http"
	"strings"
)

// AuthMiddleware ensures the user is authenticated
func AuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Here you would add your authentication logic
		// For example, check for a valid session or JWT token
		authHeader := r.Header.Get("Authorization")
		if authHeader == "" || !strings.HasPrefix(authHeader, "Bearer ") {
			http.Error(w, "Unauthorized", http.StatusUnauthorized)
			return
		}
		// Normally, you would validate the token here
		next.ServeHTTP(w, r)
	})
}

// AdminOnly ensures the user has admin privileges
func AdminOnly(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Here you would add your admin check logic
		// For example, check if the user has the admin role
		userRole := r.Header.Get("X-User-Role")
		if userRole != "admin" {
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		next.ServeHTTP(w, r)
	})
}

// StatusHandler provides a health check endpoint
func StatusHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}
