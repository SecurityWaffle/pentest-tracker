package handlers

import (
	"encoding/json"
	"html/template"
	"log"
	"net/http"
	"strconv"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func PentestsPageHandler(w http.ResponseWriter, r *http.Request) {
	tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/pentests.html"))

	pentests, err := db.GetAllPentests()
	if err != nil {
		log.Printf("Error retrieving pentests: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	data := struct {
		Pentests []models.Pentest
	}{
		Pentests: pentests,
	}

	if err := tmpl.ExecuteTemplate(w, "layout", data); err != nil {
		log.Printf("Error rendering template: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
	}
}

func CreateOrUpdatePentestHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		idStr := r.URL.Query().Get("id")
		var pentest models.Pentest

		if idStr != "" {
			id, err := strconv.Atoi(idStr)
			if err != nil {
				http.Error(w, "Invalid ID", http.StatusBadRequest)
				return
			}
			pentestPtr, err := db.GetPentestByID(id)
			if err != nil {
				log.Printf("Error retrieving pentest: %v", err)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
				return
			}
			if pentestPtr != nil {
				pentest = *pentestPtr
				pentest.StartDate = pentest.StartDate[:10] // Truncate time part for correct HTML date input format
				pentest.EndDate = pentest.EndDate[:10]     // Truncate time part for correct HTML date input format
			}
		}

		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/pentests_form.html"))
		if err := tmpl.ExecuteTemplate(w, "layout", pentest); err != nil {
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
		return
	}

	if r.Method == http.MethodPost {
		idStr := r.FormValue("id")
		var id int
		var err error

		if idStr != "" {
			id, err = strconv.Atoi(idStr)
			if err != nil {
				http.Error(w, "Invalid ID", http.StatusBadRequest)
				return
			}
		}

		startDate := r.FormValue("start_date")
		endDate := r.FormValue("end_date")

		if startDate == "" || endDate == "" {
			http.Error(w, "Start date and end date are required", http.StatusBadRequest)
			return
		}

		pentest := models.Pentest{
			ID:                   id,
			Name:                 r.FormValue("name"),
			Description:          r.FormValue("description"),
			Status:               r.FormValue("status"),
			StartDate:            startDate,
			EndDate:              endDate,
			ProductFeatureName:   r.FormValue("product_feature_name"),
			Stakeholders:         r.FormValue("stakeholders"),
			JiraTicket:           r.FormValue("jira_ticket"),
			ComponentDescription: r.FormValue("component_description"),
			ThreatModeling:       r.FormValue("threat_modeling"),
			ReferenceInfo:        r.FormValue("reference_info"),
			OutOfScope:           r.FormValue("out_of_scope"),
		}

		if id == 0 {
			err = db.CreatePentest(&pentest)
		} else {
			err = db.UpdatePentest(&pentest)
		}

		if err != nil {
			log.Printf("Error saving pentest: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/pentests", http.StatusSeeOther)
		return
	}

	http.NotFound(w, r)
}

func DeletePentestHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodPost {
		id, err := strconv.Atoi(r.FormValue("id"))
		if err != nil {
			http.Error(w, "Invalid ID", http.StatusBadRequest)
			return
		}

		if err := db.DeletePentest(id); err != nil {
			log.Printf("Error deleting pentest: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/pentests", http.StatusSeeOther)
		return
	}

	http.NotFound(w, r)
}

func ListPentestsHandler(w http.ResponseWriter, r *http.Request) {
	pentests, err := db.GetAllPentests()
	if err != nil {
		log.Printf("Error retrieving pentests: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(pentests)
}

func GetPentestHandler(w http.ResponseWriter, r *http.Request) {
	id, err := strconv.Atoi(r.URL.Query().Get("id"))
	if err != nil {
		http.Error(w, "Invalid pentest ID", http.StatusBadRequest)
		return
	}

	pentest, err := db.GetPentestByID(id)
	if err != nil {
		log.Printf("Error retrieving pentest: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	if pentest == nil {
		http.Error(w, "Pentest not found", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(pentest)
}
