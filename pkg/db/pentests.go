package db

import (
	"log"
	"time"

	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func CreatePentest(pentest *models.Pentest) error {
	query := `
    INSERT INTO pentests (name, description, status, start_date, end_date, product_feature_name, stakeholders, jira_ticket, component_description, threat_modeling, reference_info, out_of_scope, created_at, updated_at)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING id`
	err := DB.QueryRow(query,
		pentest.Name, pentest.Description, pentest.Status, pentest.StartDate, pentest.EndDate,
		pentest.ProductFeatureName, pentest.Stakeholders, pentest.JiraTicket, pentest.ComponentDescription,
		pentest.ThreatModeling, pentest.ReferenceInfo, pentest.OutOfScope, time.Now(), time.Now()).Scan(&pentest.ID)
	if err != nil {
		log.Printf("Error creating pentest: %v", err)
		return err
	}

	for _, scopeDetail := range pentest.ScopeDetails {
		scopeDetail.PentestID = pentest.ID
		if err := CreateScopeDetail(&scopeDetail); err != nil {
			return err
		}
	}

	for _, securityTool := range pentest.SecurityTools {
		securityTool.PentestID = pentest.ID
		if err := CreateSecurityTool(&securityTool); err != nil {
			return err
		}
	}

	return nil
}

func UpdatePentest(pentest *models.Pentest) error {
	query := `
    UPDATE pentests SET name=$1, description=$2, status=$3, start_date=$4, end_date=$5, product_feature_name=$6, stakeholders=$7, jira_ticket=$8, component_description=$9, threat_modeling=$10, reference_info=$11, out_of_scope=$12, updated_at=$13 WHERE id=$14`
	_, err := DB.Exec(query,
		pentest.Name, pentest.Description, pentest.Status, pentest.StartDate, pentest.EndDate,
		pentest.ProductFeatureName, pentest.Stakeholders, pentest.JiraTicket, pentest.ComponentDescription,
		pentest.ThreatModeling, pentest.ReferenceInfo, pentest.OutOfScope, time.Now(), pentest.ID)
	if err != nil {
		log.Printf("Error updating pentest: %v", err)
		return err
	}

	if err := DeleteScopeDetailsByPentestID(pentest.ID); err != nil {
		return err
	}

	if err := DeleteSecurityToolsByPentestID(pentest.ID); err != nil {
		return err
	}

	for _, scopeDetail := range pentest.ScopeDetails {
		scopeDetail.PentestID = pentest.ID
		if err := CreateScopeDetail(&scopeDetail); err != nil {
			return err
		}
	}

	for _, securityTool := range pentest.SecurityTools {
		securityTool.PentestID = pentest.ID
		if err := CreateSecurityTool(&securityTool); err != nil {
			return err
		}
	}

	return nil
}

func GetPentestByID(id int) (*models.Pentest, error) {
	query := `SELECT id, name, description, status, start_date, end_date, product_feature_name, stakeholders, jira_ticket, component_description, threat_modeling, reference_info, out_of_scope, created_at, updated_at FROM pentests WHERE id=$1`
	row := DB.QueryRow(query, id)

	var pentest models.Pentest
	if err := row.Scan(&pentest.ID, &pentest.Name, &pentest.Description, &pentest.Status, &pentest.StartDate, &pentest.EndDate, &pentest.ProductFeatureName, &pentest.Stakeholders, &pentest.JiraTicket, &pentest.ComponentDescription, &pentest.ThreatModeling, &pentest.ReferenceInfo, &pentest.OutOfScope, &pentest.CreatedAt, &pentest.UpdatedAt); err != nil {
		log.Printf("Error retrieving pentest: %v", err)
		return nil, err
	}

	scopeDetails, err := GetScopeDetailsByPentestID(pentest.ID)
	if err != nil {
		return nil, err
	}
	pentest.ScopeDetails = scopeDetails

	securityTools, err := GetSecurityToolsByPentestID(pentest.ID)
	if err != nil {
		return nil, err
	}
	pentest.SecurityTools = securityTools

	return &pentest, nil
}

func DeletePentest(id int) error {
	query := `DELETE FROM pentests WHERE id=$1`
	_, err := DB.Exec(query, id)
	if err != nil {
		log.Printf("Error deleting pentest: %v", err)
		return err
	}
	return nil
}
