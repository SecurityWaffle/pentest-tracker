package db

import (
	"log"

	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func CreateRole(role *models.Role) error {
	query := `INSERT INTO roles (name) VALUES ($1) RETURNING id`
	err := DB.QueryRow(query, role.Name).Scan(&role.ID)
	if err != nil {
		log.Printf("Error creating role: %v", err)
		return err
	}

	for _, permission := range role.Permissions {
		if err := AddPermissionToRole(role.ID, permission); err != nil {
			return err
		}
	}

	return nil
}

func AddPermissionToRole(roleID int, permission string) error {
	query := `INSERT INTO role_permissions (role_id, permission) VALUES ($1, $2)`
	_, err := DB.Exec(query, roleID, permission)
	if err != nil {
		log.Printf("Error adding permission to role: %v", err)
		return err
	}
	return nil
}

func GetRoleByID(roleID int) (*models.Role, error) {
	role := &models.Role{ID: roleID}
	err := DB.QueryRow(`SELECT name FROM roles WHERE id=$1`, roleID).Scan(&role.Name)
	if err != nil {
		log.Printf("Error fetching role: %v", err)
		return nil, err
	}

	rows, err := DB.Query(`SELECT permission FROM role_permissions WHERE role_id=$1`, roleID)
	if err != nil {
		log.Printf("Error fetching role permissions: %v", err)
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var permission string
		if err := rows.Scan(&permission); err != nil {
			log.Printf("Error scanning permission: %v", err)
			return nil, err
		}
		role.Permissions = append(role.Permissions, permission)
	}

	return role, nil
}

func GetAllRoles() ([]models.Role, error) {
	rows, err := DB.Query(`SELECT id, name FROM roles`)
	if err != nil {
		log.Printf("Error fetching roles: %v", err)
		return nil, err
	}
	defer rows.Close()

	var roles []models.Role
	for rows.Next() {
		var role models.Role
		if err := rows.Scan(&role.ID, &role.Name); err != nil {
			log.Printf("Error scanning role: %v", err)
			return nil, err
		}

		permissions, err := GetPermissionsByRoleID(role.ID)
		if err != nil {
			return nil, err
		}
		role.Permissions = permissions
		roles = append(roles, role)
	}
	return roles, nil
}

func GetPermissionsByRoleID(roleID int) ([]string, error) {
	rows, err := DB.Query(`SELECT permission FROM role_permissions WHERE role_id=$1`, roleID)
	if err != nil {
		log.Printf("Error fetching role permissions: %v", err)
		return nil, err
	}
	defer rows.Close()

	var permissions []string
	for rows.Next() {
		var permission string
		if err := rows.Scan(&permission); err != nil {
			log.Printf("Error scanning permission: %v", err)
			return nil, err
		}
		permissions = append(permissions, permission)
	}
	return permissions, nil
}
