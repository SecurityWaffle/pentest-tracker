package db

import (
	"log"

	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
	"golang.org/x/crypto/bcrypt"
)

func CreateUser(user *models.User) error {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	if err != nil {
		log.Printf("Error encrypting password: %v", err)
		return err
	}

	query := `INSERT INTO users (username, password, role) VALUES ($1, $2, $3)`
	_, err = DB.Exec(query, user.Username, string(hashedPassword), user.Role)
	if err != nil {
		log.Printf("Error creating user: %v", err)
		return err
	}
	return nil
}

func GetUserByUsername(username string) (*models.User, error) {
	var user models.User
	query := `SELECT id, username, password, role FROM users WHERE username=$1`
	row := DB.QueryRow(query, username)
	if err := row.Scan(&user.ID, &user.Username, &user.Password, &user.Role); err != nil {
		log.Printf("Error fetching user: %v", err)
		return nil, err
	}
	return &user, nil
}

func GetUserByID(userID int) (*models.User, error) {
	var user models.User
	query := `SELECT id, username, password, role FROM users WHERE id=$1`
	row := DB.QueryRow(query, userID)
	if err := row.Scan(&user.ID, &user.Username, &user.Password, &user.Role); err != nil {
		log.Printf("Error fetching user: %v", err)
		return nil, err
	}
	return &user, nil
}

func UpdateUser(user *models.User) error {
	query := `UPDATE users SET username=$1, password=$2, role=$3 WHERE id=$4`
	_, err := DB.Exec(query, user.Username, user.Password, user.Role, user.ID)
	if err != nil {
		log.Printf("Error updating user: %v", err)
		return err
	}
	return nil
}

func DeleteUser(userID int) error {
	query := `DELETE FROM users WHERE id=$1`
	_, err := DB.Exec(query, userID)
	if err != nil {
		log.Printf("Error deleting user: %v", err)
		return err
	}
	return nil
}
