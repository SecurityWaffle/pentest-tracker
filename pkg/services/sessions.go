package services

import (
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"time"

	"github.com/patrickmn/go-cache"
)

var sessionCache = cache.New(5*time.Minute, 10*time.Minute)

func CreateSession(userID int) (string, error) {
	sessionToken := generateSessionToken()
	sessionCache.Set(sessionToken, userID, cache.DefaultExpiration)
	return sessionToken, nil
}

func GetUserIDBySession(sessionToken string) (int, error) {
	userID, found := sessionCache.Get(sessionToken)
	if !found {
		return 0, fmt.Errorf("session not found")
	}
	return userID.(int), nil
}

func DeleteSession(sessionToken string) error {
	sessionCache.Delete(sessionToken)
	return nil
}

func generateSessionToken() string {
	b := make([]byte, 32)
	rand.Read(b)
	return base64.URLEncoding.EncodeToString(b)
}
