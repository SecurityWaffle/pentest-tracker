package handlers

import (
	"context"
	"encoding/json"
	"log"
	"net/http"

	"github.com/coreos/go-oidc"
	"github.com/yourusername/pentest-tracker/pkg/db"
	"github.com/yourusername/pentest-tracker/pkg/models"
	"golang.org/x/oauth2"
)

func InitOIDC() {
	// OIDC initialization logic
}

func GetOIDCSettingsHandler(w http.ResponseWriter, r *http.Request) {
	var settings models.OIDCSettings
	err := db.DB.QueryRow(`SELECT id, client_id, client_secret, redirect_url, issuer_url FROM oidc_settings WHERE id = 1`).Scan(&settings.ID, &settings.ClientID, &settings.ClientSecret, &settings.RedirectURL, &settings.IssuerURL)
	if err != nil {
		log.Printf("Error retrieving OIDC settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(settings)
}

func UpdateOIDCSettingsHandler(w http.ResponseWriter, r *http.Request) {
	var settings models.OIDCSettings
	err := json.NewDecoder(r.Body).Decode(&settings)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	_, err = db.DB.Exec(`INSERT INTO oidc_settings (id, client_id, client_secret, redirect_url, issuer_url) VALUES (1, $1, $2, $3, $4) ON CONFLICT (id) DO UPDATE SET client_id = $1, client_secret = $2, redirect_url = $3, issuer_url = $4`,
		settings.ClientID, settings.ClientSecret, settings.RedirectURL, settings.IssuerURL)
	if err != nil {
		log.Printf("Error updating OIDC settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func OIDCHandler(w http.ResponseWriter, r *http.Request) {
	var settings models.OIDCSettings
	err := db.DB.QueryRow(`SELECT client_id, client_secret, redirect_url, issuer_url FROM oidc_settings WHERE id = 1`).Scan(&settings.ClientID, &settings.ClientSecret, &settings.RedirectURL, &settings.IssuerURL)
	if err != nil {
		log.Printf("Error retrieving OIDC settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	ctx := context.Background()
	provider, err := oidc.NewProvider(ctx, settings.IssuerURL)
	if err != nil {
		log.Printf("Error creating OIDC provider: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	config := &oauth2.Config{
		ClientID:     settings.ClientID,
		ClientSecret: settings.ClientSecret,
		Endpoint:     provider.Endpoint(),
		RedirectURL:  settings.RedirectURL,
		Scopes:       []string{oidc.ScopeOpenID, "profile", "email"},
	}

	state := "random_state_string"
	http.Redirect(w, r, config.AuthCodeURL(state), http.StatusFound)
}

func OIDCCallbackHandler(w http.ResponseWriter, r *http.Request) {
	// OIDC callback logic
}
