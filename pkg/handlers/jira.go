package handlers

import (
	"log"
	"net/http"

	"github.com/andygrunwald/go-jira"
	"github.com/yourusername/pentest-tracker/pkg/db"
	"github.com/yourusername/pentest-tracker/pkg/models"
)

func ExportFindingsToJiraHandler(w http.ResponseWriter, r *http.Request) {
	var jiraSettings models.JiraSettings
	err := db.DB.QueryRow(`SELECT id, url, username, password, project_key, issue_type FROM jira_settings WHERE id = 1`).Scan(&jiraSettings.ID, &jiraSettings.URL, &jiraSettings.Username, &jiraSettings.Password, &jiraSettings.ProjectKey, &jiraSettings.IssueType)
	if err != nil {
		log.Printf("Error retrieving Jira settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	client, err := jira.NewClient(nil, jiraSettings.URL)
	if err != nil {
		log.Printf("Error creating Jira client: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	res, err := client.Authentication.AcquireSessionCookie(jiraSettings.Username, jiraSettings.Password)
	if err != nil || res == false {
		log.Printf("Error authenticating with Jira: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	findings, err := db.DB.Query(`SELECT id, title, description, severity, status, cvss_score, cvss_calculation_link, jira_ticket, recommendation, proof_of_concept, pentest_id FROM findings WHERE jira_ticket IS NULL`)
	if err != nil {
		log.Printf("Error retrieving findings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer findings.Close()

	for findings.Next() {
		var finding models.Finding
		if err := findings.Scan(&finding.ID, &finding.Title, &finding.Description, &finding.Severity, &finding.Status, &finding.CVSSScore, &finding.CVSSCalculationLink, &finding.JiraTicket, &finding.Recommendation, &finding.ProofOfConcept, &finding.PentestID); err != nil {
			log.Printf("Error scanning finding: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		issue := jira.Issue{
			Fields: &jira.IssueFields{
				Description: finding.Description,
				Summary:     finding.Title,
				Type:        jira.IssueType{Name: jiraSettings.IssueType},
				Project:     jira.Project{Key: jiraSettings.ProjectKey},
			},
		}

		newIssue, _, err := client.Issue.Create(&issue)
		if err != nil {
			log.Printf("Error creating Jira issue: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		_, err = db.DB.Exec(`UPDATE findings SET jira_ticket = $1 WHERE id = $2`, newIssue.Key, finding.ID)
		if err != nil {
			log.Printf("Error updating finding with Jira ticket: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
	}

	w.WriteHeader(http.StatusOK)
}

func ImportPendingPentestsFromJiraHandler(w http.ResponseWriter, r *http.Request) {
	var jiraSettings models.JiraSettings
	err := db.DB.QueryRow(`SELECT id, url, username, password, project_key, issue_type FROM jira_settings WHERE id = 1`).Scan(&jiraSettings.ID, &jiraSettings.URL, &jiraSettings.Username, &jiraSettings.Password, &jiraSettings.ProjectKey, &jiraSettings.IssueType)
	if err != nil {
		log.Printf("Error retrieving Jira settings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	client, err := jira.NewClient(nil, jiraSettings.URL)
	if err != nil {
		log.Printf("Error creating Jira client: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	res, err := client.Authentication.AcquireSessionCookie(jiraSettings.Username, jiraSettings.Password)
	if err != nil || res == false {
		log.Printf("Error authenticating with Jira: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	jiraIssues, _, err := client.Issue.Search("project = "+jiraSettings.ProjectKey+" AND issuetype = "+jiraSettings.IssueType+" AND status = Open", nil)
	if err != nil {
		log.Printf("Error searching Jira issues: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	for _, issue := range jiraIssues {
		_, err = db.DB.Exec(`
            INSERT INTO pentests (name, description, status, start_date, end_date, jira_ticket) VALUES ($1, $2, 'Not Started', NOW(), NOW() + INTERVAL '1 month', $3) ON CONFLICT (jira_ticket) DO NOTHING`,
			issue.Fields.Summary, issue.Fields.Description, issue.Key)
		if err != nil {
			log.Printf("Error importing Jira issue as pentest: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
	}

	w.WriteHeader(http.StatusOK)
}
