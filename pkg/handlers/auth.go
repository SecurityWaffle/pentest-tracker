package handlers

import (
	"html/template"
	"log"
	"net/http"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
	"github.com/SecurityWaffle/pentest-tracker/pkg/services"
	"golang.org/x/crypto/bcrypt"
)

func LoginHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/login.html"))
		if err := tmpl.ExecuteTemplate(w, "layout", nil); err != nil {
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
		return
	}

	if r.Method == http.MethodPost {
		username := r.FormValue("username")
		password := r.FormValue("password")

		user, err := db.GetUserByUsername(username)
		if err != nil {
			log.Printf("Error retrieving user: %v", err)
			http.Error(w, "Invalid username or password", http.StatusUnauthorized)
			return
		}

		if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password)); err != nil {
			log.Printf("Invalid password for user: %v", username)
			http.Error(w, "Invalid username or password", http.StatusUnauthorized)
			return
		}

		sessionToken, err := services.CreateSession(user.ID)
		if err != nil {
			log.Printf("Error creating session: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		http.SetCookie(w, &http.Cookie{
			Name:  "session_token",
			Value: sessionToken,
			Path:  "/",
		})

		http.Redirect(w, r, "/dashboard", http.StatusSeeOther)
	}
}

func RegisterHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/register.html"))
		if err := tmpl.ExecuteTemplate(w, "layout", nil); err != nil {
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
		return
	}

	if r.Method == http.MethodPost {
		username := r.FormValue("username")
		password := r.FormValue("password")

		user := &models.User{
			Username: username,
			Password: password,
			Role:     "user",
		}

		if err := db.CreateUser(user); err != nil {
			log.Printf("Error creating user: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/login", http.StatusSeeOther)
	}
}

func LogoutHandler(w http.ResponseWriter, r *http.Request) {
	cookie, err := r.Cookie("session_token")
	if err != nil {
		if err == http.ErrNoCookie {
			http.Redirect(w, r, "/login", http.StatusSeeOther)
			return
		}
		log.Printf("Error retrieving cookie: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	sessionToken := cookie.Value

	if err := services.DeleteSession(sessionToken); err != nil {
		log.Printf("Error deleting session: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	http.SetCookie(w, &http.Cookie{
		Name:   "session_token",
		Value:  "",
		Path:   "/",
		MaxAge: -1,
	})

	http.Redirect(w, r, "/login", http.StatusSeeOther)
}
