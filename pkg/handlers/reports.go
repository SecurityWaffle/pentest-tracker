package handlers

import (
	"html/template"
	"log"
	"net/http"
	"os"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func ListReportsHandler(w http.ResponseWriter, r *http.Request) {
	// Implement listing of reports
}

func GenerateReportHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/custom_reports.html"))
		if err := tmpl.ExecuteTemplate(w, "layout", nil); err != nil {
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
		return
	}

	if r.Method == http.MethodPost {
		reportName := r.FormValue("report_name")
		reportTemplate := r.FormValue("report_template")

		findings, err := db.GetAllFindings()
		if err != nil {
			log.Printf("Error retrieving findings: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		reportContent := reportTemplate
		// Replace placeholders in the template with actual data
		// For example, replace {{.Findings}} with the list of findings
		reportContent = replacePlaceholders(reportContent, findings)

		filePath := "reports/" + reportName + ".html"
		file, err := os.Create(filePath)
		if err != nil {
			log.Printf("Error creating report file: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
		defer file.Close()

		file.WriteString(reportContent)

		http.Redirect(w, r, "/reports", http.StatusSeeOther)
	}
}

func replacePlaceholders(template string, findings []models.Finding) string {
	// Replace {{.Findings}} with the list of findings
	// Implement your custom logic to format the findings as required
	return template
}
