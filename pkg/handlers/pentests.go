package handlers

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"

	"github.com/yourusername/pentest-tracker/pkg/db"
	"github.com/yourusername/pentest-tracker/pkg/models"
)

func ListPentestsHandler(w http.ResponseWriter, r *http.Request) {
	rows, err := db.DB.Query(`SELECT id, name, description, status, start_date, end_date FROM pentests`)
	if err != nil {
		log.Printf("Error querying pentests: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	pentests := []models.Pentest{}
	for rows.Next() {
		var pentest models.Pentest
		if err := rows.Scan(&pentest.ID, &pentest.Name, &pentest.Description, &pentest.Status, &pentest.StartDate, &pentest.EndDate); err != nil {
			log.Printf("Error scanning pentest: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
		pentests = append(pentests, pentest)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(pentests)
}

func CreateOrUpdatePentestHandler(w http.ResponseWriter, r *http.Request) {
	var pentest models.Pentest
	err := json.NewDecoder(r.Body).Decode(&pentest)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	if pentest.ID != 0 {
		_, err = db.DB.Exec(`
            UPDATE pentests SET name = $1, description = $2, status = $3, start_date = $4, end_date = $5, product_feature_name = $6, stakeholders = $7, jira_ticket = $8, component_description = $9, threat_modeling = $10, references = $11, out_of_scope = $12 WHERE id = $13`,
			pentest.Name, pentest.Description, pentest.Status, pentest.StartDate, pentest.EndDate, pentest.ProductFeatureName, pentest.Stakeholders, pentest.JiraTicket, pentest.ComponentDescription, pentest.ThreatModeling, pentest.References, pentest.OutOfScope, pentest.ID)
	} else {
		err = db.DB.QueryRow(`
            INSERT INTO pentests (name, description, status, start_date, end_date, product_feature_name, stakeholders, jira_ticket, component_description, threat_modeling, references, out_of_scope) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id`,
			pentest.Name, pentest.Description, pentest.Status, pentest.StartDate, pentest.EndDate, pentest.ProductFeatureName, pentest.Stakeholders, pentest.JiraTicket, pentest.ComponentDescription, pentest.ThreatModeling, pentest.References, pentest.OutOfScope).Scan(&pentest.ID)
		if err != nil {
			log.Printf("Error creating pentest: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
	}

	for _, scopeDetail := range pentest.ScopeDetails {
		if scopeDetail.ID != 0 {
			_, err = db.DB.Exec(`UPDATE scope_details SET activity = $1, details = $2 WHERE id = $3`, scopeDetail.Activity, scopeDetail.Details, scopeDetail.ID)
		} else {
			_, err = db.DB.Exec(`INSERT INTO scope_details (pentest_id, activity, details) VALUES ($1, $2, $3)`, pentest.ID, scopeDetail.Activity, scopeDetail.Details)
		}
		if err != nil {
			log.Printf("Error saving scope detail: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
	}

	for _, tool := range pentest.SecurityAssessmentTooling {
		if tool.ID != 0 {
			_, err = db.DB.Exec(`UPDATE security_assessment_tooling SET tool = $1, purpose = $2 WHERE id = $3`, tool.Tool, tool.Purpose, tool.ID)
		} else {
			_, err = db.DB.Exec(`INSERT INTO security_assessment_tooling (pentest_id, tool, purpose) VALUES ($1, $2, $3)`, pentest.ID, tool.Tool, tool.Purpose)
		}
		if err != nil {
			log.Printf("Error saving security tool: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
	}

	w.WriteHeader(http.StatusOK)
}

func GetPentestHandler(w http.ResponseWriter, r *http.Request) {
	pentestID := strings.TrimPrefix(r.URL.Path, "/pentests/")
	var pentest models.Pentest
	err := db.DB.QueryRow(`
        SELECT id, name, description, status, start_date, end_date, product_feature_name, stakeholders, jira_ticket, component_description, threat_modeling, references, out_of_scope, created_at
        FROM pentests WHERE id = $1`, pentestID).Scan(
		&pentest.ID, &pentest.Name, &pentest.Description, &pentest.Status, &pentest.StartDate, &pentest.EndDate, &pentest.ProductFeatureName, &pentest.Stakeholders, &pentest.JiraTicket, &pentest.ComponentDescription, &pentest.ThreatModeling, &pentest.References, &pentest.OutOfScope, &pentest.CreatedAt)
	if err != nil {
		log.Printf("Error retrieving pentest: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	rows, err := db.DB.Query(`SELECT id, activity, details FROM scope_details WHERE pentest_id = $1`, pentest.ID)
	if err != nil {
		log.Printf("Error retrieving scope details: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()
	for rows.Next() {
		var scopeDetail models.ScopeDetail
		if err := rows.Scan(&scopeDetail.ID, &scopeDetail.Activity, &scopeDetail.Details); err != nil {
			log.Printf("Error scanning scope detail: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
		pentest.ScopeDetails = append(pentest.ScopeDetails, scopeDetail)
	}

	rows, err = db.DB.Query(`SELECT id, tool, purpose FROM security_assessment_tooling WHERE pentest_id = $1`, pentest.ID)
	if err != nil {
		log.Printf("Error retrieving security assessment tooling: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	defer rows.Close()
	for rows.Next() {
		var tool models.SecurityTool
		if err := rows.Scan(&tool.ID, &tool.Tool, &tool.Purpose); err != nil {
			log.Printf("Error scanning security tool: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
		pentest.SecurityAssessmentTooling = append(pentest.SecurityAssessmentTooling, tool)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(pentest)
}
