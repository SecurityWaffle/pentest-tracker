package handlers

import (
	"html/template"
	"log"
	"net/http"
	"strconv"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func ListPentestsHandler(w http.ResponseWriter, r *http.Request) {
	pentests, err := db.GetAllPentests()
	if err != nil {
		log.Printf("Error retrieving pentests: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/pentests_list.html"))
	if err := tmpl.ExecuteTemplate(w, "layout", pentests); err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
	}
}

func CreateOrUpdatePentestHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/pentest_form.html"))
		if err := tmpl.ExecuteTemplate(w, "layout", nil); err != nil {
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
		return
	}

	if r.Method == http.MethodPost {
		pentest := &models.Pentest{
			Name:                 r.FormValue("name"),
			Description:          r.FormValue("description"),
			Status:               r.FormValue("status"),
			StartDate:            r.FormValue("start_date"),
			EndDate:              r.FormValue("end_date"),
			ProductFeatureName:   r.FormValue("product_feature_name"),
			Stakeholders:         r.FormValue("stakeholders"),
			JiraTicket:           r.FormValue("jira_ticket"),
			ComponentDescription: r.FormValue("component_description"),
			ThreatModeling:       r.FormValue("threat_modeling"),
			ReferenceInfo:        r.FormValue("reference_info"),
			OutOfScope:           r.FormValue("out_of_scope"),
		}

		// Parse scope details
		scopeDetails := []models.ScopeDetail{}
		for i := 0; ; i++ {
			activity := r.FormValue("scope_detail_activity_" + strconv.Itoa(i))
			if activity == "" {
				break
			}
			details := r.FormValue("scope_detail_details_" + strconv.Itoa(i))
			scopeDetails = append(scopeDetails, models.ScopeDetail{
				Activity: activity,
				Details:  details,
			})
		}
		pentest.ScopeDetails = scopeDetails

		// Parse security tools
		securityTools := []models.SecurityTool{}
		for i := 0; ; i++ {
			tool := r.FormValue("security_tool_tool_" + strconv.Itoa(i))
			if tool == "" {
				break
			}
			purpose := r.FormValue("security_tool_purpose_" + strconv.Itoa(i))
			securityTools = append(securityTools, models.SecurityTool{
				Tool:    tool,
				Purpose: purpose,
			})
		}
		pentest.SecurityTools = securityTools

		if id := r.FormValue("id"); id != "" {
			pentest.ID = id
			if err := db.UpdatePentest(pentest); err != nil {
				log.Printf("Error updating pentest: %v", err)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
				return
			}
		} else {
			if err := db.CreatePentest(pentest); err != nil {
				log.Printf("Error creating pentest: %v", err)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
				return
			}
		}

		http.Redirect(w, r, "/pentests", http.StatusSeeOther)
	}
}

func DeletePentestHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodPost {
		id := r.FormValue("id")
		if err := db.DeletePentest(id); err != nil {
			log.Printf("Error deleting pentest: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/pentests", http.StatusSeeOther)
	}
}
