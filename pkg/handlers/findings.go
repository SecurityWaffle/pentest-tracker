package handlers

import (
	"html/template"
	"log"
	"net/http"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/models"
)

func ListFindingsHandler(w http.ResponseWriter, r *http.Request) {
	findings, err := db.GetAllFindings()
	if err != nil {
		log.Printf("Error retrieving findings: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/findings_list.html"))
	if err := tmpl.ExecuteTemplate(w, "layout", findings); err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
	}
}

func CreateOrUpdateFindingHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		tmpl := template.Must(template.ParseFiles("web/templates/layout.html", "web/templates/findings_form.html"))
		if err := tmpl.ExecuteTemplate(w, "layout", nil); err != nil {
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
		return
	}

	if r.Method == http.MethodPost {
		finding := &models.Finding{
			Title:               r.FormValue("title"),
			Description:         r.FormValue("description"),
			Severity:            r.FormValue("severity"),
			Status:              r.FormValue("status"),
			CVSSScore:           r.FormValue("cvss_score"),
			CVSSCalculationLink: r.FormValue("cvss_calculation_link"),
			JiraTicket:          r.FormValue("jira_ticket"),
			Recommendation:      r.FormValue("recommendation"),
			ProofOfConcept:      r.FormValue("proof_of_concept"),
		}

		if id := r.FormValue("id"); id != "" {
			finding.ID = id
			if err := db.UpdateFinding(finding); err != nil {
				log.Printf("Error updating finding: %v", err)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
				return
			}
		} else {
			if err := db.CreateFinding(finding); err != nil {
				log.Printf("Error creating finding: %v", err)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
				return
			}
		}

		http.Redirect(w, r, "/findings", http.StatusSeeOther)
	}
}
