package main

import (
	"log"
	"net/http"

	"github.com/SecurityWaffle/pentest-tracker/pkg/db"
	"github.com/SecurityWaffle/pentest-tracker/pkg/handlers"
	"github.com/SecurityWaffle/pentest-tracker/pkg/middleware"
	"github.com/SecurityWaffle/pentest-tracker/pkg/services"
)

func main() {
	dbConnectionString := "user=yourusername password=yourpassword dbname=yourdbname sslmode=disable"
	if err := db.InitDB(dbConnectionString); err != nil {
		log.Fatalf("Error connecting to the database: %v", err)
	}

	services.ScheduleNVDSync()
	services.LoadTranslations()

	http.HandleFunc("/login", handlers.LoginHandler)
	http.HandleFunc("/register", handlers.RegisterHandler)
	http.HandleFunc("/logout", handlers.LogoutHandler)

	http.Handle("/pentests", middleware.AuthMiddleware(http.HandlerFunc(handlers.ListPentestsHandler)))
	http.Handle("/pentests/form", middleware.AuthMiddleware(http.HandlerFunc(handlers.CreateOrUpdatePentestHandler)))

	http.Handle("/findings", middleware.AuthMiddleware(http.HandlerFunc(handlers.ListFindingsHandler)))
	http.Handle("/findings/form", middleware.AuthMiddleware(http.HandlerFunc(handlers.CreateOrUpdateFindingHandler)))

	http.Handle("/reports", middleware.AuthMiddleware(http.HandlerFunc(handlers.ListReportsHandler)))
	http.Handle("/reports/generate", middleware.AuthMiddleware(http.HandlerFunc(handlers.GenerateReportHandler)))

	http.Handle("/admin/users", middleware.AdminOnly(http.HandlerFunc(handlers.ListUsersHandler)))
	http.Handle("/admin/settings", middleware.AdminOnly(http.HandlerFunc(handlers.SettingsHandler)))
	http.Handle("/admin/sso", middleware.AdminOnly(http.HandlerFunc(handlers.SSOSettingsHandler)))
	http.Handle("/admin/jira", middleware.AdminOnly(http.HandlerFunc(handlers.JiraSettingsHandler)))
	http.Handle("/admin/google-drive", middleware.AdminOnly(http.HandlerFunc(handlers.GoogleDriveSettingsHandler)))
	http.Handle("/admin/audit-logs", middleware.AdminOnly(http.HandlerFunc(handlers.AuditLogsHandler)))
	http.Handle("/admin/roles", middleware.AdminOnly(http.HandlerFunc(handlers.ListRolesHandler)))
	http.Handle("/admin/roles/create", middleware.AdminOnly(http.HandlerFunc(handlers.CreateRoleHandler)))

	http.Handle("/messages", middleware.AuthMiddleware(http.HandlerFunc(handlers.MessagesHandler)))
	http.Handle("/messages/create", middleware.AuthMiddleware(http.HandlerFunc(handlers.CreateMessageHandler)))

	http.Handle("/dashboard", middleware.AdminOnly(http.HandlerFunc(handlers.DashboardHandler)))

	http.Handle("/advanced_search", middleware.AuthMiddleware(http.HandlerFunc(handlers.AdvancedSearchHandler)))

	http.Handle("/self_service/request", middleware.AuthMiddleware(http.HandlerFunc(handlers.RequestPentestHandler)))
	http.Handle("/self_service/requests", middleware.AuthMiddleware(http.HandlerFunc(handlers.ListPentestRequestsHandler)))

	http.Handle("/admin/backup", middleware.AdminOnly(http.HandlerFunc(handlers.BackupHandler)))
	http.Handle("/admin/restore", middleware.AdminOnly(http.HandlerFunc(handlers.RestoreHandler)))

	log.Println("Server started at :8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}
